!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/cnnr/proj/PureLinkHomekit/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
AUTO	util/constants.py	/^    AUTO = 'AUTO'$/;"	v	class:FanMode
CURRENT_STATE	util/constants.py	/^    CURRENT_STATE = 'CURRENT-STATE'$/;"	v	class:StateType
Command	model/command.py	/^class Command:$/;"	c
CommandAssembler	assembler/command_assembler.py	/^class CommandAssembler:$/;"	c
CommandType	util/constants.py	/^class CommandType(Enum):$/;"	c
DEVICE_NUMBER	util/constants.py	/^DEVICE_NUMBER = "475"$/;"	v
DeviceState	model/state.py	/^class DeviceState:$/;"	c
ENVIRONMENTAL_DATA	util/constants.py	/^    ENVIRONMENTAL_DATA = 'ENVIRONMENTAL-CURRENT-SENSOR-DATA'$/;"	v	class:StateType
FAN	util/constants.py	/^    FAN = 'FAN'$/;"	v	class:FanMode
FAN_OFF	util/constants.py	/^    FAN_OFF = "OFF"$/;"	v	class:FanState
FAN_ON	util/constants.py	/^    FAN_ON = "FAN"$/;"	v	class:FanState
FAN_SPEED_1	util/constants.py	/^    FAN_SPEED_1 = '0001'$/;"	v	class:FanSpeed
FAN_SPEED_10	util/constants.py	/^    FAN_SPEED_10 = '0010'$/;"	v	class:FanSpeed
FAN_SPEED_2	util/constants.py	/^    FAN_SPEED_2 = '0002'$/;"	v	class:FanSpeed
FAN_SPEED_3	util/constants.py	/^    FAN_SPEED_3 = '0003'$/;"	v	class:FanSpeed
FAN_SPEED_4	util/constants.py	/^    FAN_SPEED_4 = '0004'$/;"	v	class:FanSpeed
FAN_SPEED_5	util/constants.py	/^    FAN_SPEED_5 = '0005'$/;"	v	class:FanSpeed
FAN_SPEED_6	util/constants.py	/^    FAN_SPEED_6 = '0006'$/;"	v	class:FanSpeed
FAN_SPEED_7	util/constants.py	/^    FAN_SPEED_7 = '0007'$/;"	v	class:FanSpeed
FAN_SPEED_8	util/constants.py	/^    FAN_SPEED_8 = '0008'$/;"	v	class:FanSpeed
FAN_SPEED_9	util/constants.py	/^    FAN_SPEED_9 = '0009'$/;"	v	class:FanSpeed
FAN_SPEED_AUTO	util/constants.py	/^    FAN_SPEED_AUTO = 'AUTO'$/;"	v	class:FanSpeed
FanMode	util/constants.py	/^class FanMode(Enum):$/;"	c
FanService	fan_test.py	/^class FanService:$/;"	c
FanSpeed	util/constants.py	/^class FanSpeed(Enum):$/;"	c
FanState	util/constants.py	/^class FanState(Enum):$/;"	c
HomekitFan	homekit_fan.py	/^class HomekitFan(Accessory):$/;"	c
NIGHT_MODE_OFF	util/constants.py	/^    NIGHT_MODE_OFF = 'OFF'$/;"	v	class:NightMode
NIGHT_MODE_ON	util/constants.py	/^    NIGHT_MODE_ON = 'ON'$/;"	v	class:NightMode
NightMode	util/constants.py	/^class NightMode(Enum):$/;"	c
OFF	util/constants.py	/^    OFF = 'OFF'$/;"	v	class:FanMode
OSCILLATION_OFF	util/constants.py	/^    OSCILLATION_OFF = 'OFF'$/;"	v	class:Oscillation
OSCILLATION_ON	util/constants.py	/^    OSCILLATION_ON = 'ON'$/;"	v	class:Oscillation
Oscillation	util/constants.py	/^class Oscillation(Enum):$/;"	c
QUALITY_BETTER	util/constants.py	/^    QUALITY_BETTER = "0001"$/;"	v	class:QualityTarget
QUALITY_HIGH	util/constants.py	/^    QUALITY_HIGH = "0003"$/;"	v	class:QualityTarget
QUALITY_NORMAL	util/constants.py	/^    QUALITY_NORMAL = "0004"$/;"	v	class:QualityTarget
QualityTarget	util/constants.py	/^class QualityTarget(Enum):$/;"	c
REQUEST_ENVIRONMENT_STATE	util/constants.py	/^    REQUEST_ENVIRONMENT_STATE = 'REQUEST-PRODUCT-ENVIRONMENT-CURRENT-SENSOR-DATA'$/;"	v	class:CommandType
REQUEST_STATE	util/constants.py	/^    REQUEST_STATE = 'REQUEST-CURRENT-STATE'$/;"	v	class:CommandType
SET_STATE	util/constants.py	/^    SET_STATE = 'STATE-SET'$/;"	v	class:CommandType
STANDBY_MONITORING_OFF	util/constants.py	/^    STANDBY_MONITORING_OFF = "OFF"$/;"	v	class:StandbyMonitoring
STANDBY_MONITORING_ON	util/constants.py	/^    STANDBY_MONITORING_ON = "ON"$/;"	v	class:StandbyMonitoring
STATE_CHANGE	util/constants.py	/^    STATE_CHANGE = 'STATE-CHANGE'$/;"	v	class:StateType
StandbyMonitoring	util/constants.py	/^class StandbyMonitoring(Enum):$/;"	c
StateAssembler	assembler/state_assembler.py	/^class StateAssembler:$/;"	c
StateType	util/constants.py	/^class StateType(Enum):$/;"	c
__device_state_from_state_json	assembler/state_assembler.py	/^  def __device_state_from_state_json(self,$/;"	m	class:StateAssembler	typeref:typename:DeviceState	file:
__init__	fan_test.py	/^    def __init__(self,$/;"	m	class:FanService
__init__	homekit_fan.py	/^    def __init__(self,$/;"	m	class:HomekitFan
__init__	model/command.py	/^  def __init__(self,$/;"	m	class:Command
__init__	model/state.py	/^  def __init__(self,$/;"	m	class:DeviceState	typeref:typename:None
__json_for_request_command	assembler/command_assembler.py	/^    def __json_for_request_command(self,$/;"	m	class:CommandAssembler	typeref:typename:Optional[str]	file:
__json_for_set_state_command	assembler/command_assembler.py	/^    def __json_for_set_state_command(self,$/;"	m	class:CommandAssembler	typeref:typename:Optional[str]	file:
__read_dto_value	assembler/state_assembler.py	/^def __read_dto_value(dto: Dict[str, Any],$/;"	f	typeref:typename:Union[str,int]
__repr__	model/state.py	/^    def __repr__(self):$/;"	f	member:DeviceState.state_setting_values_to	file:
_read_loop	fan_test.py	/^    async def _read_loop(self):$/;"	m	class:FanService
_read_states	fan_test.py	/^    async def _read_states(self) -> None:$/;"	m	class:FanService	typeref:typename:None
cancel_task	fan_test.py	/^    async def cancel_task(self):$/;"	m	class:FanService
category	homekit_fan.py	/^    category = CATEGORY_FAN$/;"	v	class:HomekitFan
config	fan_test.py	/^    config = configparser.ConfigParser()$/;"	v
config	main.py	/^    config = configparser.ConfigParser()$/;"	v
config_filepath	main.py	/^    config_filepath = str(pathlib.PurePath(__file__).parent) + "\/user.ini"$/;"	v
disconnect	fan_test.py	/^    async def disconnect(self) -> None:$/;"	m	class:FanService	typeref:typename:None
driver	main.py	/^    driver = AccessoryDriver(persist_file=persist_filepath, loop=loop)$/;"	v
dto_from_device_state	assembler/state_assembler.py	/^  def dto_from_device_state(self,$/;"	m	class:StateAssembler	typeref:typename:Optional[Dict[str,Any]]
fan	main.py	/^    fan = HomekitFan(username, password, driver)$/;"	v
from_homekit_value	util/constants.py	/^    def from_homekit_value(value: float):$/;"	m	class:FanSpeed
from_homekit_value	util/constants.py	/^    def from_homekit_value(value: int):$/;"	m	class:FanMode
from_homekit_value	util/constants.py	/^    def from_homekit_value(value: int):$/;"	m	class:FanState
from_homekit_value	util/constants.py	/^    def from_homekit_value(value: int):$/;"	m	class:Oscillation
hash	util/hasher.py	/^  hash = hashlib.sha512()$/;"	v
hash_password	util/hasher.py	/^def hash_password(pwd: str) -> str:$/;"	f	typeref:typename:str
homekit_value	util/constants.py	/^    def homekit_value(self):$/;"	m	class:FanMode
homekit_value	util/constants.py	/^    def homekit_value(self):$/;"	m	class:FanSpeed
homekit_value	util/constants.py	/^    def homekit_value(self):$/;"	m	class:FanState
homekit_value	util/constants.py	/^    def homekit_value(self):$/;"	m	class:Oscillation
json_from_command	assembler/command_assembler.py	/^    def json_from_command($/;"	m	class:CommandAssembler	typeref:typename:Optional[str]
loader	main.py	/^import pyhap.loader as loader$/;"	I	nameref:module:pyhap.loader
logger	fan_test.py	/^logger = logging.getLogger(__name__)$/;"	v
loop	main.py	/^    loop = asyncio.get_event_loop()$/;"	v
main	fan_test.py	/^    async def main():$/;"	f
password	fan_test.py	/^    password = user['pass']$/;"	v
password	main.py	/^    password = user['pass']$/;"	v
persist_filepath	main.py	/^    persist_filepath = str(pathlib.PurePath(__file__).parent.parent) + "\/fan_device.state"$/;"	v
pwd	util/hasher.py	/^  pwd = input("Product WiFi Password (e.g.: adgjsfhk):")$/;"	v
pwd_hash	util/hasher.py	/^  pwd_hash = base64.b64encode(hash.digest()).decode('utf-8')$/;"	v
request_states	fan_test.py	/^    async def request_states(self) -> None:$/;"	m	class:FanService	typeref:typename:None
run	homekit_fan.py	/^    async def run(self):$/;"	m	class:HomekitFan
signal_handler	main.py	/^    def signal_handler(_sig, _frame):$/;"	f
start_reading	fan_test.py	/^    async def start_reading(self):$/;"	m	class:FanService
state_from_message_json	assembler/state_assembler.py	/^  def state_from_message_json(self,$/;"	m	class:StateAssembler	typeref:typename:Optional[DeviceState]
state_setting_values_to	model/state.py	/^  def state_setting_values_to(self,$/;"	m	class:DeviceState
stop	homekit_fan.py	/^    async def stop(self):$/;"	m	class:HomekitFan
update_device	homekit_fan.py	/^    async def update_device(self):$/;"	m	class:HomekitFan
update_state	homekit_fan.py	/^    def update_state(self, char_values: Dict[str, Any]) -> None:$/;"	m	class:HomekitFan	typeref:typename:None
user	fan_test.py	/^    user = config['User']$/;"	v
user	main.py	/^    user = config['User']$/;"	v
username	fan_test.py	/^    username = user['id']$/;"	v
username	main.py	/^    username = user['id']$/;"	v
write_command	fan_test.py	/^    async def write_command(self, command: Command) -> None:$/;"	m	class:FanService	typeref:typename:None
